// Copyright 2015 runtime.js project authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

'use strict';

var isaac = require('../../deps/isaac/isaac');

// isaac.js returns crazy numbers, both positive and negative.
// This function is called on an isaac.rand() call,
// It gets the number to qualify for all of the following:
//  * Positive,
//  * Whole number,
//  * 0 < n < 256
// This ensures the numbers are similar to the numbers
// generated by VirtioRNG.
function isaacRound(n) {
  // Ensure it's positive
  if (n < 0) n = -n;
  // 0 < n < 256
  while (n > 256) n /= 4;
  // Whole number
  n = Math.round(n);

  return n;
}

var def = 'none';
var sources = {};

module.exports = {
  addSource: function(name, obj) {
    sources[name] = obj;
    // If the source needs to init some stuff, call it's init function
    if (sources[name].init) sources[name].init();
  },
  setDefault: function(name) {
    if (!sources[name]) {
      return false;
    }

    def = name;
    return true;
  },
  getRandomValues: function(length, cb) {
    // Works like /dev/random, always waits for real randomness.
    var variable = false;

    if (length instanceof Uint8Array) {
      variable = true;
    }

    if (typeof length === 'undefined') {
      throw new Error('runtime.random.getRandomValues: must have one or more arguments');
    }

    if (typeof length === 'function') {
      cb = length;
      length = 1;
    }

    if (typeof cb === 'undefined') {
      throw new Error('runtime.random.getRandomValues: must pass a callback');
    }

    var method = sources[def];

    if (variable) {
      method.fillBuffer(length, function() {
        isaac.seed(length[0]);
        cb(length);
      });
    } else {
      if (length === 0) {
        throw new Error('runtime.random.getRandomValues: length must be greater than 0');
      }

      method.fillBuffer(new Uint8Array(length), function(u8) {
        isaac.seed(u8[0]);
        cb(u8);
      });
    }
  },
  getPseudoRandomValues: function(value) {
    // This function uses isaac.js (a CSPRNG) to
    // generate randomness to fill up the the request.

    var length;
    var u8;

    if (typeof value === 'undefined') {
      length = 1;
      u8 = null;
    }

    if (typeof value === 'number') {
      length = value;
      u8 = null;
    } else {
      length = 1;
      u8 = value;
    }

    if (u8) {
      if (!(u8 instanceof Uint8Array)) {
        throw new Error('runtime.random.getPseudoRandomValues: variable must be an instance of Uint8Array');
      }

      for (var i = 0; i < u8.length; i++) {
        u8[i] = isaacRound(isaac.rand());
      }
    } else {
      if (length === 0) {
        throw new Error('runtime.random.getPseudoRandomValues: length must be greater than 0');
      }

      u8 = new Uint8Array(length);

      for (var i = 0; i < length; i++) {
        u8[i] = isaacRound(isaac.rand());
      }
    }

    return u8;
  }
};
